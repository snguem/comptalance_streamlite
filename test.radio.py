import streamlit as st

# Configuration de la page
st.set_page_config(
    page_title="Checkboxes et Radios Streamlit",
    page_icon="‚òëÔ∏è",
    layout="wide"
)

st.title("‚òëÔ∏è Checkboxes et Boutons Radio avec Streamlit")
st.markdown("---")

# ========================================
# SECTION 1: CHECKBOXES SIMPLES
# ========================================
st.header("1Ô∏è‚É£ Checkboxes Simples")

col1, col2 = st.columns(2)

with col1:
    st.subheader("Checkboxes basiques")
    
    # Checkbox simple
    agree = st.checkbox("J'accepte les conditions d'utilisation")
    
    # Checkbox avec valeur par d√©faut
    notifications = st.checkbox("Recevoir des notifications", value=True)
    
    # Checkbox avec cl√© personnalis√©e
    newsletter = st.checkbox("S'abonner √† la newsletter", key="newsletter_checkbox")
    
    # Checkbox avec aide
    analytics = st.checkbox(
        "Activer l'analytics", 
        help="Permet de collecter des statistiques d'usage"
    )
    
    # Affichage des r√©sultats
    if agree:
        st.success("‚úÖ Conditions accept√©es")
    if notifications:
        st.info("üîî Notifications activ√©es")
    if newsletter:
        st.info("üìß Newsletter activ√©e")
    if analytics:
        st.info("üìä Analytics activ√©")

with col2:
    st.subheader("Checkboxes multiples")
    
    # Groupe de checkboxes li√©es
    st.write("**Fonctionnalit√©s √† activer:**")
    
    features = {}
    features['export_pdf'] = st.checkbox("Export PDF")
    features['export_excel'] = st.checkbox("Export Excel")
    features['auto_save'] = st.checkbox("Sauvegarde automatique")
    features['backup'] = st.checkbox("Sauvegarde cloud")
    features['sharing'] = st.checkbox("Partage en √©quipe")
    
    # Compte des fonctionnalit√©s activ√©es
    active_features = sum(features.values())
    st.metric("Fonctionnalit√©s activ√©es", active_features)
    
    # Liste des fonctionnalit√©s activ√©es
    if active_features > 0:
        st.write("**Fonctionnalit√©s s√©lectionn√©es:**")
        for feature, is_active in features.items():
            if is_active:
                st.write(f"‚Ä¢ {feature.replace('_', ' ').title()}")

st.markdown("---")

# ========================================
# SECTION 2: BOUTONS RADIO SIMPLES
# ========================================
st.header("2Ô∏è‚É£ Boutons Radio Simples")

col1, col2 = st.columns(2)

with col1:
    st.subheader("Radio basique")
    
    # Radio simple
    genre = st.radio(
        "Quel est votre genre pr√©f√©r√© ?",
        ("Com√©die", "Drame", "Action", "Science-fiction")
    )
    st.write(f"Vous avez choisi: **{genre}**")
    
    # Radio horizontal
    difficulty = st.radio(
        "Niveau de difficult√©:",
        ("Facile", "Moyen", "Difficile"),
        horizontal=True
    )
    
    # Affichage conditionnel bas√© sur la s√©lection
    if difficulty == "Facile":
        st.success("üü¢ Bon choix pour d√©buter!")
    elif difficulty == "Moyen":
        st.warning("üü° Un bon √©quilibre!")
    else:
        st.error("üî¥ Pour les experts!")

with col2:
    st.subheader("Radio avec index")
    
    # Radio avec index par d√©faut
    transport = st.radio(
        "Moyen de transport pr√©f√©r√©:",
        ("üöó Voiture", "üöÜ Train", "‚úàÔ∏è Avion", "üö≤ V√©lo"),
        index=1  # Train s√©lectionn√© par d√©faut
    )
    
    # Radio avec cl√© personnalis√©e
    theme = st.radio(
        "Th√®me de l'interface:",
        ("üåû Clair", "üåô Sombre", "üé® Auto"),
        key="theme_selector"
    )
    
    st.write(f"Transport: {transport}")
    st.write(f"Th√®me: {theme}")

st.markdown("---")

# ========================================
# SECTION 3: EXEMPLES AVANC√âS
# ========================================
st.header("3Ô∏è‚É£ Exemples Avanc√©s")

col1, col2 = st.columns(2)

with col1:
    st.subheader("S√©lection conditionnelle")
    
    # Checkbox principal qui contr√¥le d'autres options
    enable_advanced = st.checkbox("Activer les options avanc√©es")
    
    if enable_advanced:
        st.write("**Options avanc√©es:**")
        
        # Options qui n'apparaissent que si la case principale est coch√©e
        debug_mode = st.checkbox("Mode debug", disabled=False)
        verbose_logs = st.checkbox("Logs d√©taill√©s", disabled=False)
        performance_monitor = st.checkbox("Monitoring performance", disabled=False)
        
        # Radio conditionnel
        if debug_mode:
            debug_level = st.radio(
                "Niveau de debug:",
                ("Minimal", "Standard", "D√©taill√©"),
                horizontal=True
            )
            st.info(f"Debug {debug_level.lower()} activ√©")
    else:
        st.info("Cochez la case ci-dessus pour voir les options avanc√©es")

with col2:
    st.subheader("Validation de formulaire")
    
    # Simuler un formulaire avec validation
    st.write("**Formulaire d'inscription:**")
    
    # Checkboxes obligatoires
    accept_terms = st.checkbox("J'accepte les conditions g√©n√©rales *")
    accept_privacy = st.checkbox("J'accepte la politique de confidentialit√© *")
    
    # Checkbox optionnel
    marketing = st.checkbox("J'accepte de recevoir des e-mails marketing")
    
    # Radio obligatoire
    account_type = st.radio(
        "Type de compte: *",
        ("Personnel", "Professionnel", "Entreprise")
    )
    
    # Validation
    form_valid = accept_terms and accept_privacy and account_type
    
    if st.button("S'inscrire", disabled=not form_valid):
        if form_valid:
            st.success("‚úÖ Inscription r√©ussie!")
            st.balloons()
        else:
            st.error("‚ùå Veuillez remplir tous les champs obligatoires (*)")
    
    if not form_valid:
        st.caption("* Champs obligatoires")

st.markdown("---")

# ========================================
# SECTION 4: USAGE AVEC SESSION STATE
# ========================================
st.header("4Ô∏è‚É£ Utilisation avec Session State")

col1, col2 = st.columns(2)

with col1:
    st.subheader("Persistance des donn√©es")
    
    # Initialisation du session state si n√©cessaire
    if 'persistent_checkboxes' not in st.session_state:
        st.session_state.persistent_checkboxes = {
            'option1': False,
            'option2': True,
            'option3': False
        }
    
    if 'persistent_radio' not in st.session_state:
        st.session_state.persistent_radio = "Option A"
    
    st.write("**Options persistantes:**")
    
    # Checkboxes avec session state
    for i in range(1, 4):
        key = f'option{i}'
        st.session_state.persistent_checkboxes[key] = st.checkbox(
            f"Option persistante {i}",
            value=st.session_state.persistent_checkboxes[key],
            key=f"persistent_cb_{i}"
        )
    
    # Radio avec session state
    st.session_state.persistent_radio = st.radio(
        "Choix persistant:",
        ("Option A", "Option B", "Option C"),
        index=["Option A", "Option B", "Option C"].index(st.session_state.persistent_radio),
        key="persistent_radio"
    )

with col2:
    st.subheader("√âtat actuel")
    
    st.write("**Checkboxes persistantes:**")
    for key, value in st.session_state.persistent_checkboxes.items():
        icon = "‚úÖ" if value else "‚ùå"
        st.write(f"{icon} {key}: {value}")
    
    st.write(f"**Radio persistant:** {st.session_state.persistent_radio}")
    
    # Bouton pour r√©initialiser
    if st.button("üîÑ R√©initialiser tout"):
        st.session_state.persistent_checkboxes = {
            'option1': False,
            'option2': False,
            'option3': False
        }
        st.session_state.persistent_radio = "Option A"
        st.experimental_rerun()

st.markdown("---")

# ========================================
# SECTION 5: STYLES ET APPARENCE
# ========================================
st.header("5Ô∏è‚É£ Personnalisation avec CSS")

# CSS personnalis√© pour styliser les √©l√©ments
st.markdown("""
<style>
.custom-checkbox {
    background-color: #f0f2f6;
    padding: 10px;
    border-radius: 5px;
    margin: 5px 0;
}

.highlight-radio {
    background: linear-gradient(90deg, #ff6b6b, #feca57);
    padding: 15px;
    border-radius: 10px;
    color: white;
    font-weight: bold;
}
</style>
""", unsafe_allow_html=True)

col1, col2 = st.columns(2)

with col1:
    st.subheader("Style personnalis√©")
    
    st.markdown('<div class="custom-checkbox">', unsafe_allow_html=True)
    custom_check = st.checkbox("Checkbox avec style personnalis√©")
    st.markdown('</div>', unsafe_allow_html=True)
    
    if custom_check:
        st.markdown('<div class="highlight-radio">Checkbox activ√©e avec style!</div>', 
                   unsafe_allow_html=True)

with col2:
    st.subheader("M√©triques bas√©es sur s√©lections")
    
    # Exemples de m√©triques dynamiques
    options_selected = sum([
        st.checkbox("M√©trique 1", key="metric1"),
        st.checkbox("M√©trique 2", key="metric2"), 
        st.checkbox("M√©trique 3", key="metric3")
    ])
    
    st.metric(
        label="Options s√©lectionn√©es",
        value=options_selected,
        delta=options_selected - 1 if options_selected > 1 else None
    )

# ========================================
# R√âSUM√â DES SYNTAXES
# ========================================
st.markdown("---")
st.header("üìù R√©sum√© des syntaxes")

st.code("""
# CHECKBOXES
checkbox = st.checkbox("Label")                    # Checkbox simple
checkbox = st.checkbox("Label", value=True)        # Avec valeur par d√©faut
checkbox = st.checkbox("Label", key="unique_key")  # Avec cl√©
checkbox = st.checkbox("Label", help="Aide")       # Avec texte d'aide
checkbox = st.checkbox("Label", disabled=True)     # D√©sactiv√©

# BOUTONS RADIO  
radio = st.radio("Question", ("Option1", "Option2"))           # Radio simple
radio = st.radio("Question", options, index=1)                 # Avec index par d√©faut
radio = st.radio("Question", options, horizontal=True)         # Horizontal
radio = st.radio("Question", options, key="unique_key")        # Avec cl√©
radio = st.radio("Question", options, disabled=True)           # D√©sactiv√©

# AVEC SESSION STATE
if 'key' not in st.session_state:
    st.session_state.key = False
st.session_state.key = st.checkbox("Label", value=st.session_state.key)
""", language="python")

st.success("üéâ Vous ma√Ætrisez maintenant les checkboxes et radios Streamlit!")